public class Singleton
{
  private static Singleton obj;

  private Singleton()
{
}

public Singleton getInstance()
{
  if(obj==null)
{
  obj = new Singleton;
}
return obj;
}

}

//Using Synchronized method

public class Singleton
{
  private static Singleton obj;

  private Singleton()
{
}

publicstatic synchronized Singleton getInstance()
{
  if(obj==null)
{
  obj = new Singleton;
}
return obj;
}

}

disabvantage -performance issue

//Solution 2

public class Singleton
{
  private static Singleton obj = new Singleton();

  private Singleton()
{
}

publicstatic synchronized Singleton getInstance()
{
  return obj;
}

-->solution 3----
public class Singleton
{
  private volatile static Singleton obj;

  private Singleton()
{
}

publicstatic synchronized Singleton getInstance()
{
  if(obj==null)
{
  synchronized(Singleton.class);

{
if(null == obj)
{
  obj = new Singleton();
}

}
return obj;
}

}


